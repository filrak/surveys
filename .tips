# Shadcn-vue Component Import Rules

1. When importing shadcn-vue components, always use default imports, not named imports. These components are exported as default exports.

Example:
```vue
// ❌ Wrong - Named import
import { Button } from '@/components/ui/button/Button.vue'

// ✅ Correct - Default import
import Button from '@/components/ui/button/Button.vue'
```

2. For components with multiple parts (like Card, RadioGroup), each part needs to be imported separately as a default import:
```vue
// ❌ Wrong - Grouped named imports
import { Card, CardHeader, CardTitle } from '@/components/ui/card'

// ✅ Correct - Separate default imports
import Card from '@/components/ui/card/Card.vue'
import CardHeader from '@/components/ui/card/CardHeader.vue'
import CardTitle from '@/components/ui/card/CardTitle.vue'
```

# Shadcn-vue Radio Group Implementation

When implementing radio groups with custom UI (like card selection):

1. The RadioGroup component should wrap the entire selection area
2. RadioGroupItem components should be rendered separately from the custom UI
3. Use standard HTML radio inputs with proper labels for accessibility
4. Connect the radio inputs to the RadioGroup using v-model
5. Use CSS/classes to style the selected state

Example structure:
```vue
<RadioGroup v-model="selected">
  <!-- Radio items for accessibility -->
  <RadioGroupItem 
    v-for="item in items" 
    :value="item.id"
    class="sr-only"
  />
  
  <!-- Custom UI -->
  <div v-for="item in items">
    <label :for="item.id">
      <Card :class="{ 'ring-2': selected === item.id }">
        <!-- Card content -->
      </Card>
      <input 
        type="radio" 
        :id="item.id" 
        v-model="selected"
        class="sr-only"
      />
    </label>
  </div>
</RadioGroup>
```

# Component Sizing Consistency

When working with shadcn-vue components that need to have consistent sizing:

1. Check the component's variant definitions first (especially for Button components which have predefined size variants)
2. For buttons, use the size prop to match other components:
   - default: h-9
   - sm: h-8
   - lg: h-10

3. When matching sizes between different component types:
   - Either use the same size variant if both components support it
   - Or explicitly set the height on the component that doesn't have size variants
   - Example: `<Input class="h-10" />` with `<Button size="lg" />`

4. Avoid setting height on the container div when components have their own height definitions

# State Management in Chat-Based Surveys

When managing state in chat-based surveys:

1. Always use a unique identifier (like survey ID) as the key for storing and updating chat state
2. Update existing state instead of creating new records:
   ```js
   // ❌ Wrong - Creating new record each time
   const saveState = () => {
     const newState = { id: crypto.randomUUID(), ... }
     states.push(newState)
   }

   // ✅ Correct - Update existing record
   const saveState = (surveyId) => {
     const existingState = states.find(s => s.surveyId === surveyId)
     if (existingState) {
       Object.assign(existingState, { ...newState })
     } else {
       states.push({ id: crypto.randomUUID(), surveyId, ... })
     }
   }
   ```

3. Maintain a single source of truth for each survey response
4. Use timestamps (createdAt, updatedAt) to track conversation progress
5. Consider implementing autosave with debounce to prevent too frequent updates

Root cause of duplicate answers: The saveAnswer function was creating a new record with a new UUID each time instead of updating the existing survey response. This violated the single source of truth principle and led to multiple parallel conversation states.